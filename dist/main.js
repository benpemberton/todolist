(()=>{"use strict";const e={newProject(e){this[e]=[]},getProjectName(t){for(const n in e)if(e[n]===t)return n},getProjectNames(){const t=[];for(const n in e)"object"==typeof e[n]&&t.push(n);return t},getProjIndex(e){const t=this.getProjectNames();if(t.length>0)return t.findIndex((t=>{if(t===e)return!0}))}};function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function n(e){t(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function r(e){t(1,arguments);var r=n(e);return r.setHours(0,0,0,0),r}function o(e,n){t(2,arguments);var o=r(e),a=r(n);return o.getTime()===a.getTime()}function a(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var i=36e5,s={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},l=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,c=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,d=/^([+-])(\d{2})(?::?(\d{2}))?$/;function u(e,n){t(1,arguments);var r=n||{},o=null==r.additionalDigits?2:a(r.additionalDigits);if(2!==o&&1!==o&&0!==o)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var i,s=m(e);if(s.date){var l=f(s.date,o);i=p(l.restDateString,l.year)}if(isNaN(i)||!i)return new Date(NaN);var c,d=i.getTime(),u=0;if(s.time&&(u=v(s.time),isNaN(u)||null===u))return new Date(NaN);if(!s.timezone){var y=new Date(d+u),g=new Date(0);return g.setFullYear(y.getUTCFullYear(),y.getUTCMonth(),y.getUTCDate()),g.setHours(y.getUTCHours(),y.getUTCMinutes(),y.getUTCSeconds(),y.getUTCMilliseconds()),g}return c=S(s.timezone),isNaN(c)?new Date(NaN):new Date(d+u+c)}function m(e){var t,n={},r=e.split(s.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?(n.date=null,t=r[0]):(n.date=r[0],t=r[1],s.timeZoneDelimiter.test(n.date)&&(n.date=e.split(s.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var o=s.timezone.exec(t);o?(n.time=t.replace(o[1],""),n.timezone=o[1]):n.time=t}return n}function f(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:null};var o=r[1]&&parseInt(r[1]),a=r[2]&&parseInt(r[2]);return{year:null==a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}function p(e,t){if(null===t)return null;var n=e.match(l);if(!n)return null;var r=!!n[4],o=y(n[1]),a=y(n[2])-1,i=y(n[3]),s=y(n[4]),c=y(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,s,c)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,s,c):new Date(NaN);var d=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(h[t]||(b(e)?29:28))}(t,a,i)&&function(e,t){return t>=1&&t<=(b(e)?366:365)}(t,o)?(d.setUTCFullYear(t,a,Math.max(o,i)),d):new Date(NaN)}function y(e){return e?parseInt(e):1}function v(e){var t=e.match(c);if(!t)return null;var n=g(t[1]),r=g(t[2]),o=g(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,o)?n*i+6e4*r+1e3*o:NaN}function g(e){return e&&parseFloat(e.replace(",","."))||0}function S(e){if("Z"===e)return 0;var t=e.match(d);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(r*i+6e4*o):NaN}var h=[31,null,31,30,31,30,31,31,30,31,30,31];function b(e){return e%400==0||e%4==0&&e%100}function j(e,r){t(1,arguments);var o=r||{},i=o.locale,s=i&&i.options&&i.options.weekStartsOn,l=null==s?0:a(s),c=null==o.weekStartsOn?l:a(o.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=n(e),u=d.getDay(),m=(u<c?7:0)+u-c;return d.setDate(d.getDate()-m),d.setHours(0,0,0,0),d}function k(e,n,r){t(2,arguments);var o=j(e,r),a=j(n,r);return o.getTime()===a.getTime()}let q={displayAll(){let t=[];return e.getProjectNames().forEach((n=>{e[n].forEach((e=>{t.push(e)}))})),t=this.sortByInputTime(t),t},displayToday(){let n=[];return e.getProjectNames().forEach((r=>{e[r].forEach((e=>{(function(e){return t(1,arguments),o(e,Date.now())})(u(e.dueDate))&&n.push(e)}))})),n=this.sortByInputTime(n),n},displayWeek(){let n=[];return e.getProjectNames().forEach((r=>{e[r].forEach((e=>{(function(e,n){return t(1,arguments),k(e,Date.now(),n)})(u(e.dueDate))&&n.push(e)}))})),n=this.sortByInputTime(n),n},sortByInputTime:e=>(e.sort(((e,t)=>e.id<t.id?-1:e.id>t.id?1:0)),e)};const E=(t,n,r,o)=>({name:t,description:n,dueDate:r,id:Date.now(),project:e.getProjectName(o)}),w=(e,t)=>{t.push(e)},N=(e,t)=>t.find((t=>{for(const n in t)if(t[n]==e)return t})),L=(e,t,n)=>{const r=n.findIndex((t=>{for(const n in t)if(t[n]==e)return!0})),o={name:t[0],description:t[1],dueDate:t[2]},a=n[r];for(const e in o)a[e]=o[e]},T=(e,t)=>{const n=t.findIndex((t=>{for(const n in t)if(t[n]==e)return!0}));t.splice(n,1)},D={addTask(e){if(localStorage[e.project]){let t=JSON.parse(localStorage.getItem(`${e.project}`));w(e,t),localStorage.setItem(`${e.project}`,JSON.stringify(t))}else localStorage.setItem(`${e.project}`,JSON.stringify([e]))},editTask(e,t,n){const r=N(e,n);let o=JSON.parse(localStorage.getItem(`${r.project}`));L(e,t,o),localStorage.setItem(`${r.project}`,JSON.stringify(o))},deleteTask(e,t){const n=N(e,t);let r=JSON.parse(localStorage.getItem(`${n.project}`));T(e,r),localStorage.setItem(`${n.project}`,JSON.stringify(r))},retrieveTasks(){const t=["length","clear","key","setItem","getItem","removeItem"];for(const n in localStorage)if(!t.includes(n)){let t=JSON.parse(localStorage.getItem(`${n}`));e.newProject(n),t.forEach((t=>{e[n].push(t)}))}},deleteProject(e){localStorage.removeItem(`${e}`)}};console.log(localStorage);const I=()=>{x();const e=document.createElement("div");e.id="form-container",e.innerHTML='<form id="task-form">\n        <input type="text" id="new-task-title" class ="form-input" \n        placeholder="Task name...">\n        <input type="text" id="new-task-desc" class="form-input"\n        placeholder="Description...">\n        <div id="pri-date-row">\n        <label for="due-date" id="date-label">Due date:\n        </label>\n        <input type="date" id="due-date" class="form-input">\n        </div>\n        <button type="button" id="cancel-task">Cancel</button>\n        <button type="button" id="submit-task">Add</button>\n    </form>';const t=document.querySelector(".task-list-window"),n=document.querySelector(".add-task");t.insertBefore(e,n),A()},x=()=>{const e=document.querySelector(".add-task");"hidden"===e.style.visibility?e.style.visibility="visible":e.style.visibility="hidden"},$=()=>{document.querySelector(".add-task").style.visibility="hidden"},C=()=>{document.querySelector(".add-task").style.visibility="visible"},A=()=>{document.getElementById("submit-task").addEventListener("click",P),document.getElementById("cancel-task").addEventListener("click",O)},P=()=>{const e=document.getElementById("task-form");if(B(e)){const t=ee(e,".form-input"),n=de(),r=E(...t,n);w(r,n),D.addTask(r);const o=n.length-1;M(n,o),U(),x()}},O=()=>{U(),x()},B=e=>{const t=e.querySelectorAll(".form-input"),n=[];if(t.forEach((e=>{""===e.value&&n.push(!1)})),0===n.length)return!0},U=()=>{document.getElementById("form-container").remove()},M=(e,t)=>{H(e,t),J(e,t)},H=(e,t)=>{const n=document.createElement("div");n.classList.add("task-entry"),n.dataset.id=e[t].id,n.innerHTML='<div class="task-details">\n        <div class="task-entry-title">\n        <input class="edit-details" readonly></input>\n        </div>\n        <div class="proj-tag">\n        <span class="proj-name"></input>\n        </div>\n    </div>\n    <div class="task-entry-icons">\n        <i class="fas fa-plus"></i>\n        <i class="far fa-edit"></i>\n        <i class="far fa-trash-alt"></i>\n    </div>',n.querySelector(".edit-details").value=e[t].name,de()===q&&(n.querySelector(".proj-name").textContent=`${e[t].project}`);const r=document.querySelector(".task-list-window"),o=document.querySelector(".add-task");r.insertBefore(n,o),Z(n)},J=(e,t)=>{const n=document.createElement("div");n.classList.add("date-entry"),n.dataset.id=e[t].id,n.innerHTML='<input type="date" class="due-date \n        edit-details" readonly="">',n.querySelector(".due-date").value=e[t].dueDate;const r=document.querySelector(".task-list-window"),o=document.querySelector(".add-task");r.insertBefore(n,o)},Z=e=>{e.querySelector(".fa-plus").addEventListener("click",z),e.querySelector(".fa-edit").addEventListener("click",z),e.querySelector(".fa-trash-alt").addEventListener("click",ne)},z=t=>{const n=t.target.closest(".task-entry"),r=t.target,o=n.dataset.id;let a=de();if(a===q){const t=n.querySelector(".proj-name").textContent;a=e[t]}const i=N(o,a);r.classList.contains("fa-plus")||r.classList.contains("fa-minus")?F(i,r,n):r.classList.contains("fa-edit")&&_(n,i)},F=(e,t,n)=>{t.classList.contains("fa-plus")?(t.classList.remove("fa-plus"),t.classList.add("fa-minus"),R(e,t)):(t.classList.remove("fa-minus"),t.classList.add("fa-plus"),Y(n,e))},Y=(e,t)=>{e.querySelector(".append-details").remove();const n=document.querySelectorAll(`[data-id="${t.id}"]`);e.querySelector(".save-btn")&&(te(e),G(n),K(n),X(e))},R=(e,t)=>{const n=t.closest(".task-entry").querySelector(".task-details"),r=document.createElement("div");r.classList.add("append-details"),r.innerHTML='<textarea type="text" class="task-desc edit-details" \n        readonly></textarea>',r.querySelector(".task-desc").value=e.description,n.appendChild(r),W(".task-desc")},W=e=>{const t=document.querySelector(`${e}`);t.style.height=t.scrollHeight+"px"},_=(e,t)=>{const n=e.querySelector(".fa-plus");e.querySelector(".append-details")||F(t,n,e);const r=document.querySelectorAll(`[data-id="${t.id}"]`);G(r),K(r),Q(e)},G=e=>{e.forEach((e=>{e.querySelectorAll(".edit-details").forEach((e=>{e.readOnly||e.disabled?(e.readOnly=!1,e.disabled=!1):(e.readOnly=!0,e.disabled=!0)}))}))},K=e=>{e.forEach((e=>{e.querySelectorAll(".edit-details").forEach((e=>{e.classList.contains("edit-highlight")?e.classList.remove("edit-highlight"):e.classList.add("edit-highlight")}))}))},Q=e=>{const t=document.createElement("button");t.classList.add("save-btn"),t.textContent="Save",t.addEventListener("click",V),e.appendChild(t),te(e)},V=t=>{const n=t.target.closest(".task-entry"),r=n.dataset.id,o=document.querySelectorAll(`[data-id="${r}"]`),a=n.querySelector(".proj-name");let i=de();i===q&&(i=e[a.textContent]);const s=ee(o,".edit-details");X(n),te(n),L(r,s,i),D.editTask(r,s,i),G(o),K(o)},X=e=>{const t=e.querySelector(".save-btn");t&&t.remove()},ee=(e,t)=>{if(NodeList.prototype.isPrototypeOf(e)){const n=[];return e.forEach((e=>{e.querySelectorAll(t).forEach((e=>n.push(e.value)))})),n}{const n=e.querySelectorAll(t),r=[];return n.forEach((e=>r.push(e.value))),r}},te=e=>{const t=e.querySelector(".fa-edit");"none"===t.style.pointerEvents?t.style.pointerEvents="auto":t.style.pointerEvents="none"},ne=t=>{const n=t.target.closest(".task-entry"),r=n.dataset.id,o=n.querySelector(".proj-name");let a=de();a===q&&(a=e[o.textContent]),re(r),D.deleteTask(r,a),T(r,a)},re=e=>{document.querySelectorAll(`[data-id="${e}"]`).forEach((e=>e.remove()))},oe=e=>{if("I"!=e.target.nodeName){se();const t=e.currentTarget;t.classList.add("side-btn-active"),ae();const n=de();"display-all"===t.id?($(),ie(q.displayAll())):"display-today"===t.id?($(),ie(q.displayToday())):"display-week"===t.id?($(),ie(q.displayWeek())):(C(),ie(n))}},ae=()=>{const e=document.querySelectorAll(".task-entry"),t=document.querySelectorAll(".date-entry");e.forEach((e=>e.remove())),t.forEach((e=>e.remove()));const n=document.getElementById("form-container");n&&n.remove()},ie=e=>{for(let t=0;t<e.length;t++)M(e,t)},se=()=>{document.querySelectorAll(".side-btn").forEach((e=>{e.classList.remove("side-btn-active")}))},le=()=>{document.querySelectorAll(".proj-btn")[0].classList.add("side-btn-active")},ce=()=>document.querySelector(".side-btn-active"),de=()=>{if(ce().closest(".task-view-menu"))return q;{const t=ce().id.split("-")[1];return e[t]}},ue=()=>{fe(),me()},me=()=>{const e=document.createElement("div");e.classList.add("project-form-box"),e.innerHTML='<form id="project-form">\n        <input type="text" id="new-project-title" class ="form-input" \n        placeholder="Project name...">\n        <button type="button" id="cancel-project">Cancel</button>\n        <button type="button" id="submit-project">Add</button>\n    </form>',e.querySelector("#cancel-project").addEventListener("click",pe),e.querySelector("#submit-project").addEventListener("click",ve);const t=document.querySelector(".project-view-menu"),n=t.querySelector(".add-project");t.insertBefore(e,n)},fe=()=>{const e=document.querySelector(".add-project");"hidden"===e.style.visibility?e.style.visibility="visible":e.style.visibility="hidden"},pe=()=>{ye(),fe()},ye=()=>{document.querySelector(".project-form-box").remove()},ve=()=>{const t=document.querySelector(".project-form-box");if(""!==t.querySelector(".form-input").value){let n=ee(t,".form-input");n=be(n[0]),e.newProject(n),ye(),ge(),Se(),se(),document.querySelector(`#proj-${n}`).classList.add("side-btn-active"),ae();const r=de();C(),ie(r),fe()}},ge=()=>{document.querySelector(".project-view-menu").querySelectorAll(".side-btn").forEach((e=>e.remove()))},Se=()=>{const t=e.getProjectNames(),n=document.querySelector(".project-view-menu"),r=n.querySelector(".add-project");for(let e=0;e<t.length;e++){const o=document.createElement("button");o.id=`proj-${t[e]}`,o.classList.add("side-btn"),o.classList.add("proj-btn");let a=je(t[[e]]);a=a.charAt(0).toUpperCase()+a.slice(1),o.innerHTML=`<span>${a}</span>\n            <div class="rem-icon-box">\n            <i class="fas fa-times" aria-hidden="true"></i>\n            </div>`;const i=o.querySelector("i");i.addEventListener("click",he),o.addEventListener("click",oe),o.addEventListener("mouseover",(()=>{i.style.visibility="visible"})),o.addEventListener("mouseout",(()=>{i.style.visibility="hidden"})),n.insertBefore(o,r)}},he=t=>{const n=t.target.closest(".side-btn"),r=n.id.split("-")[1],o=e.getProjIndex(r);if(delete e[r],D.deleteProject(r),n.classList.contains("side-btn-active")){const t=e.getProjectNames();let r=t[o];if(o>t.length-1&&(r=t[o-1]),n.remove(),ae(),e.getProjectNames().length>0){document.querySelector(`#proj-${r}`).classList.add("side-btn-active");const e=de();C(),ie(e)}else $()}else n.remove()},be=e=>{const t=e.split(" ");if(t.length>1){let e=t[0];for(let n=1;n<t.length;n++)e+="_"+t[n];return e}return e},je=e=>{const t=e.split("_");let n=t[0];for(let e=1;e<t.length;e++)n+=" "+t[e];return n};window.onload=(()=>{if(localStorage.length>0){D.retrieveTasks(),Se(),le();const t=ce().id.split("-")[1];ie(e[t])}else e.general=[],Se(),le();document.querySelector(".add-task").addEventListener("click",I),document.querySelectorAll(".side-btn").forEach((e=>{e.addEventListener("click",oe)})),document.querySelector(".add-project").addEventListener("click",ue)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,